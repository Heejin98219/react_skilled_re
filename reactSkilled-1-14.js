// redux (5)
// RTK(Redux Toolkit)
// 리덕스를 개량한 것
// 코드는 더 적게, 리덕스를 더 편하게 쓰기 위한 기능들을
// 흡수해서 만든 것이 리덕스툴킷
// 줄여서 RTK
// 리덕스와 구조나 패러다임이 모두 똑같음
// 컴포넌트에서 useSelector를 통해서 사용하는 것은 모두 똑같음
// 바뀐 부분은 모듈 파일 하나임

// 툴킷 설치 방법
// yarn add react-redux @reduxjs/toolkit

// Redex DevTools
// 리덕스를 사용하면, 리덕스 devtools를 사용할 수 있음

// Flux
// 애플리케이션 아키텍처
// React와 함께 사용
// 데이터의 단방향 흐름을 강조
// (단방향 흐름:
// 액션 → 디스패처 → 스토어 → 뷰
//  이렇게 관리되는 순환적인 흐름은
// 애플리케이션의 데이터 흐름을 예측 가능하게 만들어,
//  복잡한 상호작용이 많은
// 대규모 애플리케이션을 쉽게 관리할 수 있게 도움)

// 1.Dispatcher: 애플리케이션 내 모든 데이터 흐름을 관리하는 중앙 허브 역할을 함
// 액션들이 발생하면 디스패처를 통해 스토어로 전달
// 2. Stores: 애플리케이션의 상태(데이터)와 로직을 보유
// 스토어는 디스패처를 통해 전달된 액션에 반응하여 상태를 변경하고,
// 변경 사항을 뷰에 알림
// 3. Actions: 상태 변화를 일으킬 때 사용하는 간단한 객체
// 사용자 인터페이스에서 발생한 사용자의 행동을 액션으로 표현하고,
// 이를 디스패처를 통해 스토어로 전달
// 4. Views (React Components): 사용자 인터페이스를 구성하는 React 컴포넌트들
// 스토어에서 상태가 변하면,
// 뷰는 이를 반영하여 사용자 인터페이스를 업데이트
